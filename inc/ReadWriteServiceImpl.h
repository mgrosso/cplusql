// -*- C++ -*-
//
// $Id: ReadWriteServiceImpl.h,v 1.14 2004/08/03 21:20:41 sjackson Exp $

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from 
// be/be_codegen.cpp:969

#ifndef CLUSTERIOI_H_
#define CLUSTERIOI_H_

#include "clusterioS.h"
#include "Config.h"
#include "Exclusion.h"
#include "ptr_strdup.h"
#include "serviceC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
#pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


class ReadWriteController;

class  clusterio_ReadWriteServiceImpl : public virtual POA_clusterio::ReadWriteService
{
public:
  clusterio_ReadWriteServiceImpl (const Config &c);
  virtual ~clusterio_ReadWriteServiceImpl (void);
  
  void logClusterIOException(const char *op, const clusterio::ClusterIOException &cie) throw ();
  int waitForZeroConnections(int maxWait);

  void init(const Config *);
  void verifyState() throw (Service::PendingShutdownException, Service::ServiceException);
  void emitTime(const struct timeval &startT, const char *op, int line = 0) throw ();


virtual void append (
      const clusterio::open_info & fd,
      const clusterio::blockseq & blocks,
      const clusterio::writer_id & writer,
      CORBA::ULong sequence_num
    )
    ACE_THROW_SPEC ((
		CORBA::SystemException
		, clusterio::ClusterIOException
		, Service::ServiceException
    ));

virtual clusterio::length_t undo_appends (
    const clusterio::open_info & fd,
    const clusterio::writer_id & writer,
    CORBA::ULong_out next_sequence_num
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , clusterio::ClusterIOException
    , Service::ServiceException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

virtual clusterio::length_t read (
    const clusterio::open_info & fd,
    clusterio::length_t first_byte,
    clusterio::length_t size,
    clusterio::file_data_t_out data
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , clusterio::ClusterIOException
    , Service::ServiceException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

virtual ::clusterio::file_handle_status_seq *stat(
    const clusterio::file_handle_seq & fdset,
    CORBA::Boolean checksums
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
  ));

virtual void namespace_cp (
    const clusterio::file_handle & fd,
    const Service::ServiceRef & source,
    const clusterio::file_handle & sourcefd
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , clusterio::ClusterIOException
    , Service::ServiceException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

void clusterio_ReadWriteServiceImpl::system_cp (
    const clusterio::file_handle & fd,
    const char * destHost,
    CORBA::Long destFilePort,
    CORBA::Long destAuditPort
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
  ));

virtual void namespace_token (
    const clusterio::file_handle & fd,
    CORBA::Long append_token
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
  ));// TAO_IDL - Generated from

virtual void namespace_rm (
    const clusterio::file_handle & fd
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

virtual CORBA::Boolean namespace_unrm (
    const clusterio::file_handle & fd
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

virtual void dumpState (
    const char * filename,
    clusterio::ReadWriteService::dump_format fmt,
    clusterio::ReadWriteService::detail_level lvl,
    CORBA::String_out res
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

virtual void restart (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

virtual ::clusterio::ReadWriteService::log_level logLevel (
    clusterio::ReadWriteService::log_level lvl
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

virtual void ping (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

virtual ::Service::ServiceStatus * pullStatus (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

virtual void reconfigure (
    const Service::NVPairList & configuration
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ih.cpp:43

virtual void forcedFailureConfiguration (
    const Service::NVPairList & configuration
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
  ));// TAO_IDL - Generated from

virtual void gracefulShutdown (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));

private:

	enum { MAX_TIME_TO_WAIT = 100 };

	Config *cfg_;
	ReadWriteController *rwc_;
	volatile bool isPendingShutdown_;
	volatile long fdUsageCheckTm_;
	volatile long exceptionCnt_;
	Mutex lock_;
};


#endif /* CLUSTERIOI_H_  */
