// -*- C++ -*-
//
// $Id: NodeMonitorServiceImpl.h,v 1.13 2004/03/25 17:12:26 holahrei Exp $

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from 
// be/be_codegen.cpp:922

#ifndef NODEMONITORSERVICEIMPL_H_
#define NODEMONITORSERVICEIMPL_H_

using namespace std;
#include <map>
#include "serviceS.h"
#include "Config.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
#pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */
class NodeMonitorServicePriv ;

//Class Service_NodeMonitorPushConsumerImpl
class Service_NodeMonitorPushConsumerImpl : public virtual POA_Service::NodeMonitorPushConsumer
{
public:
  //Constructor 
  Service_NodeMonitorPushConsumerImpl (void);
  
  //Destructor 
  virtual ~Service_NodeMonitorPushConsumerImpl (void);
  


virtual void pushStatusList (
    const Service::ServiceStatusList & serviceStatusList
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));};

//Class Service_NodeMonitorServiceImpl
class Service_NodeMonitorServiceImpl : public virtual POA_Service::NodeMonitorService
{
public:
  //Constructor 
  Service_NodeMonitorServiceImpl (const Config &c);
  
  //Destructor 
  virtual ~Service_NodeMonitorServiceImpl (void);
  


virtual void registerService (
    const Service::ServiceRef & ref
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));

virtual void unregisterService (
    const Service::ServiceRef & ref
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));

virtual ::Service::ServiceStatusList * pullStatusList (
    const char * serviceName,
    const char * hostname
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));

virtual void subscribePushConsumer (
    const Service::ServiceRef & pushConsumer,
    const char * serviceName,
    const char * host
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));

virtual void unsubscribePushConsumer (
    const Service::ServiceRef & pushConsumer
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));

virtual void ping (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));

virtual ::Service::ServiceStatus * pullStatus (
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
  ));

virtual void reconfigure (
    const Service::NVPairList & configuration
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));

virtual void gracefulShutdown (
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));

virtual void pushStatusList (
    const Service::ServiceStatusList & serviceStatusList
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Service::ServiceException
    , Service::PendingShutdownException
  ));

private:
    NodeMonitorServicePriv *d_;
};

#endif /* NODEMONITORSERVICEIMPL_H_  */
