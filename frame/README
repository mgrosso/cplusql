                       Welcome to libframe


What is libframe?
===============

libframe is a library that provides tools for building quality c++ software. It
includes some powerful classes that can act as application frameworks,
including very configurable threaded event handling and classes for handline
flows of tuple or byte based data through a variety of classes that can filter,
enhance, join, or concatenate them using an abstract expression hierarchy.

see http://sourceforge.net/projects/libframe/


How to install?
===============

to see what your configuration options are do...
$ ./configure --help

then do the usual...

$ ./configure #your options here
$ make
$ make test

this will create src/libframe.so and libframe.a. You use them with your programs
in the normal way. You can also install the headers and library to a different
directory using ...

$ make install

Configuration
=============

Usage
=====

documentation is needed here. The best way to get started is to look 
through the headers. A few good places to start are 

    Config.h
        a class that makes configuring applications easy, it 
        provides for easy use and integration of command line, 
        environment, compiled in, and file based configuration.

    Log.h
        handy way to standardize logging in your app.

        TODO: should have a way to use syslog, and/or do synchronous logging
        to stderr.

    ptr.h
        a template based smart pointer, like <auto_ptr>, but without 
        the brain dead exclusive ownership semantics. Its achieves thread
        safe without using a mutex, so it never blocks and adds only a 
        very small constant time overhead.

    BaseException.h
        inherits from c++ standard <exception> class, and adds convenience
        formatting of error messages and handy macros that report the
        __FILE__ and __LINE__ from which an exception was thrown.

    Event.h
        abstract event handling class providing 

    AbstractRelation.h
    Expression.h
    Dest.h
        These are some key base classes for handling tuple and byte based
        streams of data.

    DestFile.h
        handy for writing to files. 
    
    Slurp.h
        convenience class that returns a file as a c string, allocated 
        with new[].

    ptr_strdup.h
    Convert.h
        convenience classes for those of us who refuse to gently into the
        slow bloated and buggy night that is the standard iostream classes.

    ... and other classes, big and small.


Hacking libframe
==============

Contributions are welcome, please use sourceforge to submit bugs.  Please run
report.sh and include the output with your bug reports.  Submit patches via
E-Mail to mgrosso@acm.org

To add new source files, or otherwise change the way frame builds, you will
likely need to modify one of the build scripts. While it is possible to do
configure && make && make install straight from cvs, this process uses several
automatically generated files which you should not edit. 

even though they are
maintained in cvs for convenience. 

To build the build scripts, you will need autoconf version 2.58 and automake
version 1.8. You can safely modify by hand configure.ac, Makefile.am,
src/Makefile.am, test/make_makefile_am.sh, acsite.m4. You should not edit
anything ending in ".in" or inc/system_config.h by hand. Also, test/Makefile.am
is created by running test/make_makefile_am.sh manually as necessary and
inc/system_config.h.in is generated by occasionally running autoheader
manually.  If you have the right versions of autoconf and automake, all other
generated files can be created by running ./auto.sh --clean from the top
directory.


Stay tuned
==========

see 
    http://sourceforge.net/projects/libframe/

see also the related projects:
    http://sourceforge.net/projects/ptr/
    http://sourceforge.net/projects/cplusql/
